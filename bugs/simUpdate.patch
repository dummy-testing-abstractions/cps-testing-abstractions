diff --git a/src/modules/src/kalman_core/kalman_core.c b/src/modules/src/kalman_core/kalman_core.c
index d04c3dc1..0d02f088 100644
--- a/src/modules/src/kalman_core/kalman_core.c
+++ b/src/modules/src/kalman_core/kalman_core.c
@@ -472,7 +472,6 @@ void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float
   // When flying, the accelerometer directly measures thrust (hence is useless to estimate body angle while flying)
 
   float dx, dy, dz;
-  float tmpSPX, tmpSPY, tmpSPZ;
   float zacc;
 
   if (quadIsFlying) // only acceleration in z direction
@@ -490,15 +489,10 @@ void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float
     this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
     this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 
-    // keep previous time step's state for the update
-    tmpSPX = this->S[KC_STATE_PX];
-    tmpSPY = this->S[KC_STATE_PY];
-    tmpSPZ = this->S[KC_STATE_PZ];
-
     // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
-    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
-    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
-    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
+    this->S[KC_STATE_PX] += dt * (gyro->z * this->S[KC_STATE_PY] - gyro->y * this->S[KC_STATE_PZ] - GRAVITY_MAGNITUDE * this->R[2][0]);
+    this->S[KC_STATE_PY] += dt * (-gyro->z * this->S[KC_STATE_PX] + gyro->x * this->S[KC_STATE_PZ] - GRAVITY_MAGNITUDE * this->R[2][1]);
+    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * this->S[KC_STATE_PX] - gyro->x * this->S[KC_STATE_PY] - GRAVITY_MAGNITUDE * this->R[2][2]);
   }
   else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
   {
@@ -512,15 +506,10 @@ void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float
     this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
     this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 
-    // keep previous time step's state for the update
-    tmpSPX = this->S[KC_STATE_PX];
-    tmpSPY = this->S[KC_STATE_PY];
-    tmpSPZ = this->S[KC_STATE_PZ];
-
     // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
-    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
-    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
-    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
+    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * this->S[KC_STATE_PY] - gyro->y * this->S[KC_STATE_PZ] - GRAVITY_MAGNITUDE * this->R[2][0]);
+    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * this->S[KC_STATE_PX] + gyro->x * this->S[KC_STATE_PZ] - GRAVITY_MAGNITUDE * this->R[2][1]);
+    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * this->S[KC_STATE_PX] - gyro->x * this->S[KC_STATE_PY] - GRAVITY_MAGNITUDE * this->R[2][2]);
   }
 
   // attitude update (rotate by gyroscope), we do this in quaternions
@@ -548,29 +537,18 @@ void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float
   float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 #endif /*SOFTWARE_IN_THE_LOOP or HARDWARE_IN_THE_LOOP*/
 
-  float tmpq0;
-  float tmpq1;
-  float tmpq2;
-  float tmpq3;
-
   // rotate the quad's attitude by the delta quaternion vector computed above
-  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
-  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
-  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
-  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
-
-  if (! quadIsFlying) {
-    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
-
-    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * initialQuaternion[0];
-    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * initialQuaternion[1];
-    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * initialQuaternion[2];
-    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * initialQuaternion[3];
-  }
+  this->q[0] = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
+  this->q[1] = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
+  this->q[2] = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
+  this->q[3] = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 
   // normalize and store the result
-  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3);
-  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
+  float norm = arm_sqrt(this->q[0]*this->q[0] + this->q[1]*this->q[1] + this->q[2]*this->q[2] + this->q[3]*this->q[3]);
+  this->q[0] = this->q[0]/norm;
+  this->q[1] = this->q[1]/norm;
+  this->q[2] = this->q[2]/norm;
+  this->q[3] = this->q[3]/norm;
   assertStateNotNaN(this);
 }
 
@@ -650,17 +628,17 @@ void kalmanCoreFinalize(kalmanCoreData_t* this, uint32_t tick)
 #endif /*SOFTWARE_IN_THE_LOOP or HARDWARE_IN_THE_LOOP*/
 
     // rotate the quad's attitude by the delta quaternion vector computed above
-    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
-    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
-    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
-    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
+    this->q[0] = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
+    this->q[1] = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
+    this->q[2] = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
+    this->q[3] = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 
     // normalize and store the result
-    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3);
-    this->q[0] = tmpq0 / norm;
-    this->q[1] = tmpq1 / norm;
-    this->q[2] = tmpq2 / norm;
-    this->q[3] = tmpq3 / norm;
+    float norm = arm_sqrt(this->q[0]*this->q[0] + this->q[1]*this->q[1] + this->q[2]*this->q[2] + this->q[3]*this->q[3]);
+    this->q[0] = this->q[0] / norm;
+    this->q[1] = this->q[1] / norm;
+    this->q[2] = this->q[2] / norm;
+    this->q[3] = this->q[3] / norm;
 
     /** Rotate the covariance, since we've rotated the body
      *
